/** @file     Rte_MemSWC.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE
  * @note     Version 7.5.0
  */

#ifndef RTE_MEMSWC_H
#define RTE_MEMSWC_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_MemSWC_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_RE_MemSWC_StoreData)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/

#ifndef RTE_CORE
#define RTE_E_NvMService_E_NOT_OK ((Std_ReturnType)1)
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_CDS_MemSWC {
   /* Per-Instance Memorys (sic) */
   P2VAR(Rte_PimType_MemSWC_parkStatus, AUTOMATIC, RTE_DATA) Pim_ParkStatus;
};
typedef struct Rte_CDS_MemSWC Rte_CDS_MemSWC;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
#ifndef RTE_CORE
typedef Rte_PimType_MemSWC_parkStatus parkStatus;
#endif /* RTE_CORE */

/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h"
extern CONST(struct Rte_CDS_MemSWC, RTE_CONST) Rte_Inst_MemSWC;
#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h"


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_MemSWC, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE

#define NvM_START_SEC_CODE
#include "NvM_MemMap.h"
FUNC(Std_ReturnType, NvM_CODE) NvM_ReadBlock(VAR(NvM_BlockIdType, AUTOMATIC) BlockId,
                                             VAR(NvM_Rb_VoidPtr, AUTOMATIC) NvM_DstPtr);

FUNC(Std_ReturnType, NvM_CODE) NvM_SetRamBlockStatus(VAR(NvM_BlockIdType, AUTOMATIC) BlockId,
                                                     VAR(boolean, AUTOMATIC) BlockChanged);

FUNC(Std_ReturnType, NvM_CODE) NvM_WriteBlock(VAR(NvM_BlockIdType, AUTOMATIC) BlockId,
                                              VAR(NvM_Rb_ConstVoidPtr, AUTOMATIC) NvM_SrcPtr);

#define NvM_STOP_SEC_CODE
#include "NvM_MemMap.h"
#define RTE_START_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h"
extern CONST(Rte_SelfType_NvM, RTE_CONST) Rte_Self_SWCI5;
#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h"
#define RTE_START_SEC_VAR_INIT_UNSPECIFIED
#include "Rte_MemMap.h"
extern VAR(Rte_PimType_MemSWC_parkStatus, RTE_APPL_DATA) Rte_CPim_MemSWC_ParkStatus;
#define RTE_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "Rte_MemMap.h"
#define RTE_START_SEC_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h"
extern VAR(boolean, RTE_DATA) Rte_Rx_000002;
#define RTE_STOP_SEC_VAR_CLEARED_BOOLEAN
#include "Rte_MemMap.h"
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_MemSWC_StoreData)
/* Inline function call optimization; Rte_Call_RP_NvM_ParkStatus_ReadBlock to NvM_ReadBlock */
#define Rte_Call_RP_NvM_ParkStatus_ReadBlock( DstPtr ) NvM_ReadBlock(((VAR(NvM_BlockIdType, AUTOMATIC))3), DstPtr)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_MemSWC_StoreData)
/* Inline function call optimization; Rte_Call_RP_NvM_ParkStatus_SetRamBlockStatus to NvM_SetRamBlockStatus */
#define Rte_Call_RP_NvM_ParkStatus_SetRamBlockStatus( BlockChanged ) NvM_SetRamBlockStatus(((VAR(NvM_BlockIdType, AUTOMATIC))3), BlockChanged)

#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_MemSWC_StoreData)
/* Inline function call optimization; Rte_Call_RP_NvM_ParkStatus_WriteBlock to NvM_WriteBlock */
#define Rte_Call_RP_NvM_ParkStatus_WriteBlock( SrcPtr ) NvM_WriteBlock(((VAR(NvM_BlockIdType, AUTOMATIC))3), SrcPtr)

#endif
/* Inline read optimization; Rte_Pim_ParkStatus to direct read */
#define Rte_Pim_ParkStatus()  ( (P2VAR(parkStatus, AUTOMATIC, RTE_APPL_DATA)) &Rte_CPim_MemSWC_ParkStatus )
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_MemSWC_StoreData)
/* Inline read optimization; Rte_Read_RP_ParkStatus_DE_ParkState to direct access */
#define Rte_Read_RP_ParkStatus_DE_ParkState( data )  ( RTE_ATOMIC8((*(data)) = Rte_Rx_000002),((VAR(Std_ReturnType, AUTOMATIC))RTE_E_OK) )
#endif

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define MemSWC_START_SEC_CODE
#include "MemSWC_MemMap.h"
FUNC(void, MemSWC_CODE) RE_MemSWC_StoreData(void);
#define MemSWC_STOP_SEC_CODE
#include "MemSWC_MemMap.h"

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_MEMSWC_H */
