/*******************************************************************************
 * Autogenerated by MCALgen for MCU V1.0.54.30643: Mcu_Device.cpp
 *******************************************************************************/

extern "C" {
  #include "Mcu.h"
#if (MCU_DEV_ERROR_DETECT == STD_ON)
  #include "Det.h"
#endif
  #include "Mcu_Implementation.h"
}
#include "vrtaStdDevices.h"
#include "virtualDevice.hpp"

#define MCU_APIS  "None|Mcu_Init|Mcu_InitRamSection|Mcu_InitClock|Mcu_DistributePllClock|"\
                  "Mcu_GetPllStatusOrRamState|Mcu_GetResetReason|Mcu_GetResetRawValue|Mcu_PerformReset|Mcu_SetMode|"\
                  "Mcu_GetVersionInfo"

#define MCU_DETS  "None|MCU_E_PARAM_CONFIG|MCU_E_PARAM_CLOCK|MCU_E_PARAM_MODE|"\
                  "MCU_E_PARAM_RAMSECTION|MCU_E_PLL_NOT_LOCKED|MCU_E_UNINIT|MCU_E_PARAM_POINTER"

class McuDevice : public VirtualDevice {
  protected:
    uint32 _det_instance;
    uint32 _det_api;
    uint32 _det_error;
    uint8  _reset_reason;
    uint32 _reset_count;

  public:
    // -------------------------------------------------------------------------
    McuDevice(const char *name) {
      _det_instance = 0;
      _det_api = 0;
      _det_error = 0;
      _reset_reason = 0;
      _reset_count = 0;
      RegisterAs(name);
      // Optional: If true. you need to implement
      // GetPersistentDataSize / GetPersistentData /
      // SetPersistentData
      PersistThroughReset(true);
    }

#if (MCU_DEV_ERROR_DETECT == STD_ON)
    // -------------------------------------------------------------------------
    void ReportDETError(uint32 instanceId, uint32 apiId, uint32 errorId) { /* [$MCU 1009] */
      _det_instance = instanceId;
      if (apiId > 9) {
        _det_api = apiId - 5; // VersionInfo
      } else {
        _det_api = apiId + 1U;
      }

      switch (errorId) {
        case MCU_E_PARAM_CONFIG:  _det_error = 1U; break;
        case MCU_E_PARAM_CLOCK: _det_error = 2U; break;
        case MCU_E_PARAM_MODE: _det_error = 3U; break;
        case MCU_E_PARAM_RAMSECTION: _det_error = 4U; break;
        case MCU_E_PLL_NOT_LOCKED: _det_error = 5U; break;
        case MCU_E_UNINIT: _det_error = 6U; break;
        case MCU_E_PARAM_POINTER: _det_error = 7U; break;
      }
      Raise(EVENT_HANDLER(McuDevice::DETEvent));
    }
#endif

    // -------------------------------------------------------------------------
    void ResetReason(Mcu_ResetType mcu_reset_reason) {
       _reset_reason = mcu_reset_reason + 1;
      _reset_count++;
      Raise(EVENT_HANDLER(McuDevice::ResetReasonEvent)); /* [$MCU 1017] */
      Raise(EVENT_HANDLER(McuDevice::ResetCountEvent));
      vrtaAction action;
      NoData(action);
      SendAction(AM_DEVICE_ID, AM_ACTION_ID_Reset, action);
    }

    // -----------------------------------------
    uint32 Reset_count() {
      return _reset_count;
    }

  protected:

    //---------------------------------------------------------------------------
    vrtaDataLen GetPersistentDataSize(void) {
      return sizeof(uint32);
    }

    //---------------------------------------------------------------------------
    vrtaByte * GetPersistentData(void) {
      return (vrtaByte *)&_reset_count;
    }

    //---------------------------------------------------------------------------
    void SetPersistentData(vrtaByte *addr, vrtaDataLen len) {
      _reset_count = *(uint32 *)addr;
    }

    // -------------------------------------------------------------------------
    // Called during RegisterAs() to build the basic information about the device
    void GetDeviceInfo(OptList &info) { /* [$MCU 1007] */
      info.Add("Type", "Mcu");
      info.Add("Description", "Implementation of AUTOSAR Mcu");
      info.Add("Version", "1.0.54");
    }

    // -------------------------------------------------------------------------
    // Called during RegisterAs() to build the action handlers and descriptions
    void GetDeviceActions(ActionList &actions) {

      ADD_ACTION_HANDLER(McuDevice::InjectResetAction); /* [$MCU 1023] */
      actions.Add("InjectReset",  "Inject reset reason", "Raises ResetReason Event").
        In("Reset", "Reset Reason", "Power|Watchdog|Software|Undefined");

    }

    // -------------------------------------------------------------------------
    vrtaErrType InjectResetAction(const vrtaAction &action) { /* [$MCU 1024] */
      Mcu_ResetType reset = (Mcu_ResetType)UnsignedValueFor(action);
      Mcu_InjectReset_helper(reset);
      return RTVECUErr_NONE;
    }

   // -------------------------------------------------------------------------
    // Called during RegisterAs() to build the event handlers and descriptions
    void GetDeviceEvents(EventList &events) {

      #if (MCU_DEV_ERROR_DETECT == STD_ON)  /* [$MCU 1008] [$MCU 1027]  */
      ADD_EVENT_HANDLER(McuDevice::DETEvent);
        events.Add("DET", "DET error raised in Mcu", "Poll,Raise"). /* [$MCU 1010] */
          Out("Instance", "The Mcu instance",          "%u").
          Out("API",      "The API causing the error", MCU_APIS).
          Out("Error",    "The most recent error",     MCU_DETS);
      #endif

      ADD_EVENT_HANDLER(McuDevice::ResetReasonEvent); /* [$MCU 1015] */
      events.Add("ResetReason", "Reset reason", "Poll,Raise").
      Out("ResetReason", "Reset reason", "None|Power|Watchdog|Software|Undefined");

      ADD_EVENT_HANDLER(McuDevice::ResetCountEvent); /* [$MCU 1029]*/
      events.Add("ResetCount", "Mcu Reset Count", "Poll,Raise").
       Out("ResetCount",  "Number of Mcu resets", "%u");
    }

    // -------------------------------------------------------------------------
    vrtaErrType ResetReasonEvent(vrtaEvent &event) {  /* [$MCU 1018] */
      SetValue(event, _reset_reason);
      return RTVECUErr_NONE;
    }

    // -----------------------------------------
    vrtaErrType ResetCountEvent(vrtaEvent &event) { /* [$MCU 1030] */
      SetValue(event,_reset_count);
      return RTVECUErr_NONE;
    }
    // -------------------------------------------------------------------------
    vrtaErrType DETEvent(vrtaEvent &event) {  /* [$MCU 1010] */
      SetValue(event, _det_instance, _det_api, _det_error);
      return RTVECUErr_NONE;
    }

};

/*******************************************************************************
 *                         Global Variables
 ******************************************************************************/
static McuDevice Mcu("Mcu"); /* [$MCU 1006] */

/*******************************************************************************
 *                         Interface
 ******************************************************************************/

void Mcu_ReportDETError(uint32 instanceId, uint32 apiId, uint32 errorId) {
#if (MCU_DEV_ERROR_DETECT == STD_ON)
  Mcu.ReportDETError(instanceId, apiId, errorId);
#endif
}

void Mcu_Raise_ResetReason_event(Mcu_ResetType mcu_reset_reason) {
  Mcu.ResetReason(mcu_reset_reason);
}

uint32 Mcu_ResetCounter_helper(void) {
  return Mcu.Reset_count();
}

